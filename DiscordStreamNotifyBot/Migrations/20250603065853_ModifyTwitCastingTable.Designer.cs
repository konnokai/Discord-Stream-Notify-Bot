// <auto-generated />
using System;
using DiscordStreamNotifyBot.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiscordStreamNotifyBot.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20250603065853_ModifyTwitCastingTable")]
    partial class ModifyTwitCastingTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.BannerChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChannelId")
                        .HasColumnType("longtext")
                        .HasColumnName("channel_id");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_added");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("guild_id");

                    b.Property<string>("LastChangeStreamId")
                        .HasColumnType("longtext")
                        .HasColumnName("last_change_stream_id");

                    b.HasKey("Id")
                        .HasName("pk_banner_change");

                    b.ToTable("banner_change", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.GuildConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_added");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("guild_id");

                    b.Property<ulong>("LogMemberStatusChannelId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("log_member_status_channel_id");

                    b.Property<ulong>("NoticeChannelId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("notice_channel_id");

                    b.HasKey("Id")
                        .HasName("pk_guild_config");

                    b.ToTable("guild_config", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.GuildYoutubeMemberConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_added");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("guild_id");

                    b.Property<string>("MemberCheckChannelId")
                        .HasColumnType("longtext")
                        .HasColumnName("member_check_channel_id");

                    b.Property<string>("MemberCheckChannelTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("member_check_channel_title");

                    b.Property<ulong>("MemberCheckGrantRoleId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("member_check_grant_role_id");

                    b.Property<string>("MemberCheckVideoId")
                        .HasColumnType("longtext")
                        .HasColumnName("member_check_video_id");

                    b.HasKey("Id")
                        .HasName("pk_guild_youtube_member_config");

                    b.ToTable("guild_youtube_member_config", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.HoloVideos", b =>
                {
                    b.Property<string>("VideoId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("video_id");

                    b.Property<string>("ChannelId")
                        .HasColumnType("longtext")
                        .HasColumnName("channel_id");

                    b.Property<string>("ChannelTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("channel_title");

                    b.Property<int>("ChannelType")
                        .HasColumnType("int")
                        .HasColumnName("channel_type");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_private");

                    b.Property<DateTime>("ScheduledStartTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("scheduled_start_time");

                    b.Property<string>("VideoTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("video_title");

                    b.HasKey("VideoId")
                        .HasName("pk_holo_videos");

                    b.ToTable("holo_videos", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.NijisanjiVideos", b =>
                {
                    b.Property<string>("VideoId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("video_id");

                    b.Property<string>("ChannelId")
                        .HasColumnType("longtext")
                        .HasColumnName("channel_id");

                    b.Property<string>("ChannelTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("channel_title");

                    b.Property<int>("ChannelType")
                        .HasColumnType("int")
                        .HasColumnName("channel_type");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_private");

                    b.Property<DateTime>("ScheduledStartTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("scheduled_start_time");

                    b.Property<string>("VideoTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("video_title");

                    b.HasKey("VideoId")
                        .HasName("pk_nijisanji_videos");

                    b.ToTable("nijisanji_videos", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.NonApprovedVideos", b =>
                {
                    b.Property<string>("VideoId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("video_id");

                    b.Property<string>("ChannelId")
                        .HasColumnType("longtext")
                        .HasColumnName("channel_id");

                    b.Property<string>("ChannelTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("channel_title");

                    b.Property<int>("ChannelType")
                        .HasColumnType("int")
                        .HasColumnName("channel_type");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_private");

                    b.Property<DateTime>("ScheduledStartTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("scheduled_start_time");

                    b.Property<string>("VideoTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("video_title");

                    b.HasKey("VideoId")
                        .HasName("pk_non_approved_videos");

                    b.ToTable("non_approved_videos", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.NoticeTwitcastingStreamChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_added");

                    b.Property<ulong>("DiscordChannelId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("discord_channel_id");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("guild_id");

                    b.Property<string>("ScreenId")
                        .HasColumnType("longtext")
                        .HasColumnName("screen_id");

                    b.Property<string>("StartStreamMessage")
                        .HasColumnType("longtext")
                        .HasColumnName("start_stream_message");

                    b.HasKey("Id")
                        .HasName("pk_notice_twitcasting_stream_channels");

                    b.ToTable("notice_twitcasting_stream_channels", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.NoticeTwitchStreamChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangeStreamDataMessage")
                        .HasColumnType("longtext")
                        .HasColumnName("change_stream_data_message");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_added");

                    b.Property<ulong>("DiscordChannelId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("discord_channel_id");

                    b.Property<string>("EndStreamMessage")
                        .HasColumnType("longtext")
                        .HasColumnName("end_stream_message");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("guild_id");

                    b.Property<string>("NoticeTwitchUserId")
                        .HasColumnType("longtext")
                        .HasColumnName("notice_twitch_user_id");

                    b.Property<string>("StartStreamMessage")
                        .HasColumnType("longtext")
                        .HasColumnName("start_stream_message");

                    b.HasKey("Id")
                        .HasName("pk_notice_twitch_stream_channels");

                    b.ToTable("notice_twitch_stream_channels", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.NoticeTwitterSpaceChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_added");

                    b.Property<ulong>("DiscordChannelId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("discord_channel_id");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("guild_id");

                    b.Property<string>("NoticeTwitterSpaceUserId")
                        .HasColumnType("longtext")
                        .HasColumnName("notice_twitter_space_user_id");

                    b.Property<string>("NoticeTwitterSpaceUserScreenName")
                        .HasColumnType("longtext")
                        .HasColumnName("notice_twitter_space_user_screen_name");

                    b.Property<string>("StratTwitterSpaceMessage")
                        .HasColumnType("longtext")
                        .HasColumnName("strat_twitter_space_message");

                    b.HasKey("Id")
                        .HasName("pk_notice_twitter_space_channel");

                    b.ToTable("notice_twitter_space_channel", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.NoticeYoutubeStreamChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangeTimeMessage")
                        .HasColumnType("longtext")
                        .HasColumnName("change_time_message");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_added");

                    b.Property<string>("DeleteMessage")
                        .HasColumnType("longtext")
                        .HasColumnName("delete_message");

                    b.Property<ulong>("DiscordNoticeStreamChannelId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("discord_notice_stream_channel_id");

                    b.Property<ulong>("DiscordNoticeVideoChannelId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("discord_notice_video_channel_id");

                    b.Property<string>("EndMessage")
                        .HasColumnType("longtext")
                        .HasColumnName("end_message");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("guild_id");

                    b.Property<bool>("IsCreateEventForNewStream")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_create_event_for_new_stream");

                    b.Property<string>("NewStreamMessage")
                        .HasColumnType("longtext")
                        .HasColumnName("new_stream_message");

                    b.Property<string>("NewVideoMessage")
                        .HasColumnType("longtext")
                        .HasColumnName("new_video_message");

                    b.Property<string>("StratMessage")
                        .HasColumnType("longtext")
                        .HasColumnName("strat_message");

                    b.Property<string>("YouTubeChannelId")
                        .HasColumnType("longtext")
                        .HasColumnName("you_tube_channel_id");

                    b.HasKey("Id")
                        .HasName("pk_notice_youtube_stream_channel");

                    b.ToTable("notice_youtube_stream_channel", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.OtherVideos", b =>
                {
                    b.Property<string>("VideoId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("video_id");

                    b.Property<string>("ChannelId")
                        .HasColumnType("longtext")
                        .HasColumnName("channel_id");

                    b.Property<string>("ChannelTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("channel_title");

                    b.Property<int>("ChannelType")
                        .HasColumnType("int")
                        .HasColumnName("channel_type");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_private");

                    b.Property<DateTime>("ScheduledStartTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("scheduled_start_time");

                    b.Property<string>("VideoTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("video_title");

                    b.HasKey("VideoId")
                        .HasName("pk_other_videos");

                    b.ToTable("other_videos", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.RecordYoutubeChannel", b =>
                {
                    b.Property<string>("YoutubeChannelId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("youtube_channel_id");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_added");

                    b.HasKey("YoutubeChannelId")
                        .HasName("pk_record_youtube_channel");

                    b.ToTable("record_youtube_channel", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.TwitcastingSpider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChannelId")
                        .HasColumnType("longtext")
                        .HasColumnName("channel_id");

                    b.Property<string>("ChannelTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("channel_title");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_added");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("guild_id");

                    b.Property<bool>("IsRecord")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_record");

                    b.Property<bool>("IsWarningUser")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_warning_user");

                    b.Property<string>("ScreenId")
                        .HasColumnType("longtext")
                        .HasColumnName("screen_id");

                    b.HasKey("Id")
                        .HasName("pk_twitcasting_spider");

                    b.ToTable("twitcasting_spider", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.TwitcastingStream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("longtext")
                        .HasColumnName("category");

                    b.Property<string>("ChannelId")
                        .HasColumnType("longtext")
                        .HasColumnName("channel_id");

                    b.Property<string>("ChannelTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("channel_title");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_added");

                    b.Property<int>("StreamId")
                        .HasColumnType("int")
                        .HasColumnName("stream_id");

                    b.Property<DateTime>("StreamStartAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("stream_start_at");

                    b.Property<string>("StreamSubTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("stream_sub_title");

                    b.Property<string>("StreamTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("stream_title");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("thumbnail_url");

                    b.HasKey("Id")
                        .HasName("pk_twitcasting_streams");

                    b.ToTable("twitcasting_streams", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.TwitchSpider", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_added");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("guild_id");

                    b.Property<bool>("IsRecord")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_record");

                    b.Property<bool>("IsWarningUser")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_warning_user");

                    b.Property<string>("OfflineImageUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("offline_image_url");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("profile_image_url");

                    b.Property<string>("UserLogin")
                        .HasColumnType("longtext")
                        .HasColumnName("user_login");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext")
                        .HasColumnName("user_name");

                    b.HasKey("UserId")
                        .HasName("pk_twitch_spider");

                    b.ToTable("twitch_spider", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.TwitchStream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_added");

                    b.Property<string>("GameName")
                        .HasColumnType("longtext")
                        .HasColumnName("game_name");

                    b.Property<string>("StreamId")
                        .HasColumnType("longtext")
                        .HasColumnName("stream_id");

                    b.Property<DateTime>("StreamStartAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("stream_start_at");

                    b.Property<string>("StreamTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("stream_title");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext")
                        .HasColumnName("user_id");

                    b.Property<string>("UserLogin")
                        .HasColumnType("longtext")
                        .HasColumnName("user_login");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_twitch_streams");

                    b.ToTable("twitch_streams", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.TwitterSpace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("SpaecActualStartTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("spaec_actual_start_time");

                    b.Property<string>("SpaecId")
                        .HasColumnType("longtext")
                        .HasColumnName("spaec_id");

                    b.Property<string>("SpaecMasterPlaylistUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("spaec_master_playlist_url");

                    b.Property<string>("SpaecTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("spaec_title");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext")
                        .HasColumnName("user_name");

                    b.Property<string>("UserScreenName")
                        .HasColumnType("longtext")
                        .HasColumnName("user_screen_name");

                    b.HasKey("Id")
                        .HasName("pk_twitter_space");

                    b.ToTable("twitter_space", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.TwitterSpaceSpider", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_added");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("guild_id");

                    b.Property<bool>("IsRecord")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_record");

                    b.Property<bool>("IsWarningUser")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_warning_user");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext")
                        .HasColumnName("user_name");

                    b.Property<string>("UserScreenName")
                        .HasColumnType("longtext")
                        .HasColumnName("user_screen_name");

                    b.HasKey("UserId")
                        .HasName("pk_twitter_space_spider");

                    b.ToTable("twitter_space_spider", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.YoutubeChannelNameToId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChannelId")
                        .HasColumnType("longtext")
                        .HasColumnName("channel_id");

                    b.Property<string>("ChannelName")
                        .HasColumnType("longtext")
                        .HasColumnName("channel_name");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_added");

                    b.HasKey("Id")
                        .HasName("pk_youtube_channel_name_to_id");

                    b.ToTable("youtube_channel_name_to_id", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.YoutubeChannelOwnedType", b =>
                {
                    b.Property<string>("ChannelId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("channel_id");

                    b.Property<string>("ChannelTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("channel_title");

                    b.Property<int>("ChannelType")
                        .HasColumnType("int")
                        .HasColumnName("channel_type");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_added");

                    b.HasKey("ChannelId")
                        .HasName("pk_youtube_channel_owned_type");

                    b.ToTable("youtube_channel_owned_type", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.YoutubeChannelSpider", b =>
                {
                    b.Property<string>("ChannelId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("channel_id");

                    b.Property<string>("ChannelTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("channel_title");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_added");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("guild_id");

                    b.Property<bool>("IsTrustedChannel")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_trusted_channel");

                    b.Property<DateTime>("LastSubscribeTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_subscribe_time");

                    b.HasKey("ChannelId")
                        .HasName("pk_youtube_channel_spider");

                    b.ToTable("youtube_channel_spider", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.YoutubeMemberAccessToken", b =>
                {
                    b.Property<ulong>("DiscordUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("discord_user_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("DiscordUserId"));

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_added");

                    b.Property<string>("EncryptedAccessToken")
                        .HasColumnType("longtext")
                        .HasColumnName("encrypted_access_token");

                    b.HasKey("DiscordUserId")
                        .HasName("pk_youtube_member_access_token");

                    b.ToTable("youtube_member_access_token", (string)null);
                });

            modelBuilder.Entity("DiscordStreamNotifyBot.DataBase.Table.YoutubeMemberCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CheckYTChannelId")
                        .HasColumnType("longtext")
                        .HasColumnName("check_yt_channel_id");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_added");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("guild_id");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_checked");

                    b.Property<DateTime>("LastCheckTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_check_time");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_youtube_member_check");

                    b.ToTable("youtube_member_check", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
