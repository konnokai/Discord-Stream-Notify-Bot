// <auto-generated />
using System;
using Discord_Stream_Notify_Bot.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Discord_Stream_Notify_Bot.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20210421053417_AddMemberCheck")]
    partial class AddMemberCheck
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8");

            modelBuilder.Entity("Discord_Stream_Notify_Bot.DataBase.Table.BannerChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChannelId")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastChangeStreamId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BannerChange");
                });

            modelBuilder.Entity("Discord_Stream_Notify_Bot.DataBase.Table.ChannelOwnedType", b =>
                {
                    b.Property<string>("ChannelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChannelTitle")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChannelType")
                        .HasColumnType("INTEGER");

                    b.HasKey("ChannelId");

                    b.ToTable("ChannelOwnedType");
                });

            modelBuilder.Entity("Discord_Stream_Notify_Bot.DataBase.Table.ChannelSpider", b =>
                {
                    b.Property<string>("ChannelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChannelTitle")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWarningChannel")
                        .HasColumnType("INTEGER");

                    b.HasKey("ChannelId");

                    b.ToTable("ChannelSpider");
                });

            modelBuilder.Entity("Discord_Stream_Notify_Bot.DataBase.Table.GuildConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MemberCheckChannelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MemberCheckGrantRoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MemberCheckVideoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GuildConfig");
                });

            modelBuilder.Entity("Discord_Stream_Notify_Bot.DataBase.Table.HoloStreamVideo", b =>
                {
                    b.Property<string>("VideoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChannelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChannelTitle")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChannelType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ScheduledStartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoTitle")
                        .HasColumnType("TEXT");

                    b.HasKey("VideoId");

                    b.ToTable("HoloStreamVideo");
                });

            modelBuilder.Entity("Discord_Stream_Notify_Bot.DataBase.Table.MemberAccessToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DiscordUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("GoogleAccessToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("GoogleExpiresIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("GoogleRefrechToken")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MemberAccessToken");
                });

            modelBuilder.Entity("Discord_Stream_Notify_Bot.DataBase.Table.NijisanjiStreamVideo", b =>
                {
                    b.Property<string>("VideoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChannelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChannelTitle")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChannelType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ScheduledStartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoTitle")
                        .HasColumnType("TEXT");

                    b.HasKey("VideoId");

                    b.ToTable("NijisanjiStreamVideo");
                });

            modelBuilder.Entity("Discord_Stream_Notify_Bot.DataBase.Table.NoticeStreamChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChangeTimeMessage")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeleteMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndMessage")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NewStreamMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("NewVideoMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("NoticeStreamChannelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StratMessage")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NoticeStreamChannel");
                });

            modelBuilder.Entity("Discord_Stream_Notify_Bot.DataBase.Table.OtherStreamVideo", b =>
                {
                    b.Property<string>("VideoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChannelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChannelTitle")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChannelType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ScheduledStartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoTitle")
                        .HasColumnType("TEXT");

                    b.HasKey("VideoId");

                    b.ToTable("OtherStreamVideo");
                });

            modelBuilder.Entity("Discord_Stream_Notify_Bot.DataBase.Table.RecordChannel", b =>
                {
                    b.Property<string>("ChannelId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChannelId");

                    b.ToTable("RecordChannel");
                });

            modelBuilder.Entity("Discord_Stream_Notify_Bot.DataBase.Table.YoutubeMemberCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GuildConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastCheckStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastCheckTime")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GuildConfigId");

                    b.ToTable("YoutubeMemberCheck");
                });

            modelBuilder.Entity("Discord_Stream_Notify_Bot.DataBase.Table.YoutubeMemberCheck", b =>
                {
                    b.HasOne("Discord_Stream_Notify_Bot.DataBase.Table.GuildConfig", null)
                        .WithMany("MemberCheck")
                        .HasForeignKey("GuildConfigId");
                });
#pragma warning restore 612, 618
        }
    }
}
